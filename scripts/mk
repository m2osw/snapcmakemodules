#!/bin/bash
#
# Sample script to run make without having to retype the long path each time
# This will work if you built the environment using our ~/bin/build-snap script

if test ! -d debian
then
	echo "error: this script is expected to be run from the top folder of a project (where the debian folder appears)."
	exit 1
fi

if test "`whoami`" = "root"
then
	echo "error: this script cannot be run as root."
	exit 1
fi

FULL_VERSION=`dpkg-parsechangelog --show-field Version | sed -e 's/~.*//' -e 's/\(^[0-9]\+\.[0-9]\+\.[0-9]\+.[0-9]\+\).*/\1/'`
DOC_VERSION=`echo ${FULL_VERSION} | sed -e 's/\(^[0-9]\+\.[0-9]\+\).*/\1/'`
SOURCE=`pwd`
PROJECT=`basename ${SOURCE}`
PROCESSORS=`nproc`
PARENTDIR=`dirname ${SOURCE}`
PARENTNAME=`basename ${PARENTDIR}`
if test "${PARENTNAME}" != "contrib"
then
	CONTRIBDIR=""
	TOPDIR=".."
else
	CONTRIBDIR="contrib/"
	TOPDIR="../.."
fi
BUILD="${TOPDIR}/BUILD"
TYPE="Debug"
TARGET=
LESS=false
DOCS=false
COVERAGE=false
TEST=false
TESTS="${TEST_OPTIONS}"		# TEST_OPTIONS can be defined by the project to add default options to always use along the unittest
LAUNCHPAD=false

while test -n "${1}"
do
	case ${1} in
	"--coverage"|"-c")
		if test ! -x dev/coverage
		then
			# TODO: move the coverage script to cmake/scripts along this mk script
			echo "error: coverage script not yet available for this project."
			exit 1
		fi
		shift
		COVERAGE=true
		;;

	"--documentation"|"-d")
		if test ! -d doc
		then
			echo "error: doc folder not present; option not available."
			exit 1
		fi
		shift
		DOCS=true
		;;

	"--debug"|"-g")
		shift
		TYPE="Debug"
		;;

	"-h"|"--help")
		echo "Usage: ${0} [-opts]"
		echo "where -opts are:"
		echo "  --coverage | -c        Run the tests to determine coverage."
		echo "                         Use -t with -c to only run coverage for those tests."
		echo "  --documentation | -d   Rebuild the documentation."
		echo "  --debug | -g           Build the Debug version."
		echo "  --help | -h            Print out this help screen."
		echo "  --install | -i         Install once built."
		echo "  --less | -l            Force output through less."
		echo "  --packages | -b        Build packages on launchpad."
		echo "  --processors | -p      Change the number of processors."
		echo "  --release | -r         Build the Release version."
		echo "  --sanitize | -s        Build the Sanitized version."
		echo "  --test | -t <name> ... Build and then run the tests."
		echo "  --verbose | -v         Render the 'make' tool verbose."
		echo "  --version              Current version of the project."
		exit 0
		;;

	"-i"|"--install")
		shift
		TARGET=install
		;;

	"-l"|"--less")
		shift
		LESS=true
		;;

	"-b"|"--packages")
		if test ! -d debian
		then
			echo "error: build on launchpad not available, debian folder not found."
			exit 1
		fi
		read -p "Are you sure you are ready to build on Launchpad? y/[N] " answer
		if test "${answer}" != "y" -o "${answer}" != "Y"
		then
			echo "warning: the build was not approved."
			exit 1
		fi
		LAUNCHPAD=true
		;;

	"-p"|"--processors")
		shift
		PROCESSORS="${1}"
		shift
		;;

	"-r"|"--release")
		shift
		TYPE="Release"
		;;

	"-s"|"--sanitize")
		shift
		TYPE="Sanitize"
		;;

	"-t"|"--test")
		if test ! -d tests
		then
			echo "error: no tests folder detected; option not available."
			exit 1
		fi
		shift
		TEST=true
		while [[ "${1}" != "" && "${1}" != "-"* ]]
		do
			TESTS="${TESTS} ${1}"
			shift
		done
		;;

	"-v"|"--verbose")
		shift
		export VERBOSE=1
		;;

	"--version")
		echo $FULL_VERSION
		exit 0
		;;

	*)
		echo "error: unknown command line option \"${1}\"."
		exit 1
		;;

	esac
done


OUTPUT="${BUILD}/${TYPE}/${CONTRIBDIR}${PROJECT}"


if ${DOCS}
then
	# Delete the existing output folder and the tarball
	#
	rm -rf ${OUTPUT}/doc/${PROJECT}-doc-${DOC_VERSION} \
	       ${OUTPUT}/doc/${PROJECT}-doc-${DOC_VERSION}.tar.gz
fi

if ${LESS}
then
	make -j${PROCESSORS} -C ${OUTPUT} ${TARGET} 2>&1 | less -SR
	RESULT=${?}
else
	make -j${PROCESSORS} -C ${OUTPUT} ${TARGET}
	RESULT=${?}
fi

if [[ ${RESULT} = 0 ]]
then
	if ${COVERAGE}
	then
		dev/coverage ${TESTS}
		RESULT=${?}
	elif ${TEST}
	then
		if ${LESS}
		then
			${OUTPUT}/tests/unittest --progress ${TESTS} 2>&1 | less -SR
			RESULT=${PIPESTATUS[0]}
		else
			${OUTPUT}/tests/unittest --progress ${TESTS}
			RESULT=${?}
		fi
	fi
fi

if [[ ${RESULT} = 0 ]]
then
	if ${LAUNCHPAD}
	then
		cd ${TOPDIR}
		if test ! -d ~/.build-snap.rc
		then
			echo
			echo "warning: no ~/.build-snap.rc file found, send-to-lanchpad.sh may fail because it can't properly sign the source files."
			echo
		fi
		bin/send-to-launchpad.sh ${PROJECT}
	fi
	echo
	echo "Success."
else
	echo
	echo "Build failed."
fi

