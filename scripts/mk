#!/bin/bash
#
# Sample script to run make without having to retype the long path each time
# This will work if you built the environment using our ~/bin/build-snap script
#
# If your project requires additional parameters to its Unit Tests, then add
# a PROJECT_TEST_ARGS in your local mk script:
#
#    export PROJECT_TEST_ARGS='--tcp-port 80'
#
# You can add any other variable you may need like a path to tools your are
# using at compile time (See contrib/sitter/mk for details):
#
#    export PATH="`cd ../../BUILD/Debug/contrib/advgetopt/tools && pwd`:${PATH}"
#
# You can define additional options to run the tests:
#
#    export TEST_OPTIONS="--extra-option value1,value2"
#


##
## VERIFY BASIC ENVIRONMENT
##
if test ! -d debian
then
    echo "error: this script is expected to be run from the top folder of a project (where the debian folder appears)."
    exit 1
fi

if test "`whoami`" = "root"
then
    echo "error: this script cannot be run as root."
    exit 1
fi


##
## DEFINE VARIABLE USER CAN CHANGE WITH COMMAND LINE OPTIONS
##
FULL_VERSION=`dpkg-parsechangelog --show-field Version | sed -e 's/~.*//' -e 's/\(^[0-9]\+\.[0-9]\+\.[0-9]\+.[0-9]\+\).*/\1/'`
DOC_VERSION=`echo ${FULL_VERSION} | sed -e 's/\(^[0-9]\+\.[0-9]\+\).*/\1/'`
SOURCE=`pwd`
PROJECT=`basename ${SOURCE}`
PROCESSORS=`nproc`
PARENTDIR=`dirname ${SOURCE}`
PARENTNAME=`basename ${PARENTDIR}`
if test "${PARENTNAME}" != "contrib"
then
    CONTRIBDIR=""
    TOPDIR=".."
else
    CONTRIBDIR="contrib/"
    TOPDIR="../.."
fi
BUILD="${TOPDIR}/BUILD"
TYPE="Debug"
TARGET=
LESS=false
DOCS=false
COVERAGE=
TEST=false
TEST_DBG=false
TESTS=
TEST_LIST=
TEST_SEED=
CATCH_EXCEPTIONS=
LAUNCHPAD=false

PROJECT_NAME=`dpkg-parsechangelog --show-field Source`
if test -z "${PROJECT_NAME}"
then
    echo "error: could not determine default project name."
    exit 1
fi

# Retrieve the user default PROCESSORS=... and other variables
if test -f ~/.build-snap.rc
then
    . ~/.build-snap.rc
fi

##
## PARSE USER COMMAND LINE OPTIONS
##
while test -n "${1}"
do
    case ${1} in
    "--catch-exceptions")
        shift
        CATCH_EXCEPTIONS='-ex "catch throw"'
        ;;

    "--clean"|"-k")
        shift
        TARGET=clean
        ;;

    "--coverage"|"-c")
        if test ! -d tests
        then
            echo "error: no tests folder detected; option not available."
            exit 1
        fi
        if test -x ../cmake/scripts/coverage
        then
            COVERAGE=../cmake/scripts/coverage
        elif test -x ../../cmake/scripts/coverage
        then
            COVERAGE=../../cmake/scripts/coverage
        else
            echo "error: could not find the coverage script in .../cmake/scripts"
            exit 1
        fi
        shift
        ;;

    "--documentation"|"-d")
        if test ! -d doc
        then
            echo "error: doc folder not present; option not available."
            exit 1
        fi
        shift
        DOCS=true
        ;;

    "--debug"|"-g")
        shift
        TYPE="Debug"
        ;;

    "--help"|"-h")
        echo "Usage: ${0} [-opts]"
        echo "where -opts are:"
        echo "  --clean | -k              Clean the output folder"
        echo "  --documentation | -d      Rebuild the documentation."
        echo "  --debug | -g              Build the Debug version."
        echo "  --help | -h               Print out this help screen."
        echo "  --install | -i            Install once built."
        echo "  --less | -l               Force output through less."
        echo "  --processors | -p <count> Change the number of processors."
        echo "  --project <name>          Name of the project (default: \"${PROJECT_NAME}\")."
        echo "  --release | -r            Build the Release version."
        echo "  --sanitize | -s           Build the Sanitized version."
        echo "  --verbose | -v            Render the 'make' tool verbose."
        echo "  --version                 Current version of the project."

        if test -d debian
        then
            echo "  --packages | -b           Build packages on launchpad."
        fi

        if test -d tests
        then
            echo "  --catch-exceptions        Ask debugger to also catch exceptions."
            echo "  --coverage | -c           Run the tests to determine coverage."
            echo "                            Use -t with -c to only run coverage for those tests."
            echo "  --list-tests [tests|tags] List available tests."
            echo "  --seed <seed>             Define the seed."
            echo "  --test | -t [<name> ...]  Build and then run the tests."
            echo "                            Test names can be written separated by commas"
            echo "                            in which case you cannot include any spaces:"
            echo "                               -t a b c   or   -t a,b,c"
            echo "  --tg [<name> ...]         Like --test but run the tests with the debugger."
        fi

        exit 0
        ;;

    "--install"|"-i")
        shift
        TARGET=install
        ;;

    "--less"|"-l")
        shift
        LESS=true
        ;;

    "--list-tests")
        if test ! -d tests
        then
            echo "error: no tests folder detected; option not available."
            exit 1
        fi
        shift
        TEST_LIST=
        while [[ "${1}" != "" && "${1}" != "-"* ]]
        do
            if test -n "${TEST_LIST}"
            then
                TEST_LIST="${TEST_LIST} "
            fi
            TEST_LIST="${TEST_LIST}--list-${1}"
            shift
        done
        if test -z "${TEST_LIST}"
        then
            TEST_LIST="--list-tests"
        fi
        ;;

    "--packages"|"-b")
        if test ! -d debian
        then
            echo "error: build on launchpad not available, debian folder not found."
            exit 1
        fi
        shift
        LAUNCHPAD=true
        ;;

    "--processors"|"-p")
        shift
        PROCESSORS="${1}"
        shift
        ;;

    "--project")
        shift
        if test -z "$1"
        then
            echo "error: project name is mandatory after --project"
            exit 1
        fi
        PROJECT_NAME="$1"
        shift
        ;;

    "--release"|"-r")
        shift
        TYPE="Release"
        ;;

    "--sanitize"|"-s")
        shift
        TYPE="Sanitize"
        ;;

    "--seed")
        shift
        TEST_SEED="--seed $1"
        shift
        ;;

    "--test"|"-t"|"--tg")
        if test ! -d tests
        then
            echo "error: no tests folder detected; option not available."
            exit 1
        fi
        if test "$1" = "--tg"
        then
            TEST_DBG=true
        fi
        shift
        TEST=true
        while [[ "${1}" != "" && "${1}" != "-"* ]]
        do
            if test -n "${TESTS}"
            then
                TESTS="${TESTS},"
            fi
            TESTS="${TESTS}${1}"
            shift
        done
        ;;

    "--verbose"|"-v")
        shift
        export VERBOSE=1
        ;;

    "--version")
        echo $FULL_VERSION
        exit 0
        ;;

    *)
        echo "error: unknown command line option \"${1}\"."
        exit 1
        ;;

    esac
done

##
## Further variable initialization
##
OUTPUT="${BUILD}/${TYPE}/${CONTRIBDIR}${PROJECT}"
PROJECT_TMPDIR="${OUTPUT}/tmp"

BINARY_DIR="`cd ${OUTPUT} && pwd`"
RESULT=${?}
if [[ ${RESULT} != 0 ]]
then
    echo "error: could not cd to OUTPUT directory \"${OUTPUT}\"."
    exit 1
fi

DIST_DIR="`cd ${BUILD}/${TYPE}/dist && pwd`"
RESULT=${?}
if [[ ${RESULT} != 0 ]]
then
    echo "error: could not cd to DIST directory \"${BUILD}/${TYPE}/dist\"."
    exit 1
fi

if test -z "${UID}"
then
    echo "error: expected UID to be defined with your user identifier."
    exit 1
fi
if test -z "${PROJECT_NAME}"
then
    echo "error: could not gather the name of the project, which is mandatory."
    exit 1
fi
LOCK_PATH="${BUILD}/${TYPE}/tmp"
mkdir -p ${LOCK_PATH}
LOCK_FILE="${LOCK_PATH}/mk-${PROJECT_NAME}.lock"
if ! (set -o noclobber; echo > ${LOCK_FILE})
then
    echo "error: the \"mk\" for project ${PROJECT_NAME} script is currently running, second instance canceled."
    exit 1
fi
unlock_script() {
    rm -f ${LOCK_FILE}
}
trap unlock_script EXIT

##
## VERIFY PARAMETER COHERENCY (avoid conflicts)
##
if test "${TARGET}" = "clean"
then
    if test -n "${COVERAGE}"
    then
        echo "error: --clean and --coverage can't be used together."
        exit 1
    fi
    if ${TEST}
    then
        echo "error: --clean and --test can't be used together."
        exit 1
    fi
    if ${LAUNCHPAD}
    then
        echo "error: --clean and --packages can't be used together."
        exit 1
    fi
    if ${DOCS}
    then
        echo "error: --clean and --documentation can't be used together."
        exit 1
    fi

    # Also delete the docs so they get rebuilt too
    #
    # (I know the last test above seems contradictory... that's because
    # of the target which could be incorrect otherwise)
    #
    DOCS=true
fi

if ${LESS} && test -n "${COVERAGE}"
then
    echo "error: --coverage and --less cannot be used together."
    exit 1
fi

if ${TEST_DBG} && ${LESS}
then
    echo "error: --tg (run tests in gdb) and --less cannot be used together."
    exit 1
fi

if ${TEST_DBG} && test -n "${COVERAGE}"
then
    echo "error: --tg (run tests in gdb) and --coverage cannot be used together."
    exit 1
fi

if ${TEST_DBG} && ${LAUNCHPAD}
then
    echo "error: --tg (run tests in gdb) and --packages (send to launchpad) cannot be used together."
    exit 1
fi

if ${LAUNCHPAD}
then
    read -p "Are you sure you are ready to build on Launchpad? (y/[N]) " answer
    if test "${answer}" != "y" -a "${answer}" != "Y"
    then
        echo "warning: the build was not approved."
        exit 1
    fi
fi

process() {
    echo "info: starting build process on `date`"

    ##
    ## LOCAL CLEAN UP
    ##
    if test "${TARGET}" = "clean" -a -d tmp
    then
        rmdir --ignore-fail-on-non-empty tmp
    fi

    ##
    ## DOCS
    ##
    if ${DOCS}
    then
        # Delete the existing output folder and the tarball
        # otherwise the docs do not get reprocessed
        #
        rm -rf ${OUTPUT}/doc/${PROJECT}-doc-${DOC_VERSION} \
               ${OUTPUT}/doc/${PROJECT}-doc-${DOC_VERSION}.tar.gz
    fi

    ##
    ## BUILD PROJECT
    ##
    make -j${PROCESSORS} -C ${OUTPUT} ${TARGET}
    RESULT=${?}
    if [[ ${RESULT} -ne 0 ]]
    then
        echo "error: build failed."
        return 1
    fi

    if test -n "${COVERAGE}"
    then
        if test -n "${TEST_OPTIONS}"
        then
            ${COVERAGE} --args "--progress ${TEST_OPTIONS}" "${TESTS}"
        else
            ${COVERAGE} "${TESTS}"
        fi
        RESULT=${?}
        if [[ ${RESULT} -ne 0 ]]
        then
            echo "error: coverage script failed."
            return 1
        fi
    else
        if test "${TYPE}" = "Sanitize" -a -f "${SOURCE}/tests/sanitizer-options.sh"
        then
            . ${SOURCE}/tests/sanitizer-options.sh
        fi

        if test -n "${TEST_LIST}"
        then
            ${OUTPUT}/tests/unittest \
                --colour-mode ansi \
                --tmp-dir "${PROJECT_TMPDIR}" \
                --binary-dir "${BINARY_DIR}" \
                --dist-dir "${DIST_DIR}" \
                --source-dir "${SOURCE}" \
                ${TEST_LIST}
        elif ${TEST}
        then
            echo "${OUTPUT}/tests/unittest --tmp-dir \"${PROJECT_TMPDIR}\" --binary-dir \"${BINARY_DIR}\" --dist-dir \"${DIST_DIR}\" --source-dir \"${SOURCE}\" ${PROJECT_TEST_ARGS} ${TEST_SEED} --progress \"${TESTS}\" ${TEST_OPTIONS}"
            if ${TEST_DBG}
            then
                gdb ${CATCH_EXCEPTIONS} \
                    -ex 'run' \
                    --args ${OUTPUT}/tests/unittest \
                        --tmp-dir "${PROJECT_TMPDIR}" \
                        --binary-dir "${BINARY_DIR}" \
                        --dist-dir "${DIST_DIR}" \
                        --source-dir "${SOURCE}" \
                        ${PROJECT_TEST_ARGS} \
                        ${TEST_SEED} \
                        --progress \
                        ${TEST_OPTIONS} \
                            "${TESTS}"

                # the check of the result in this case is not quite relevant
                echo "info: gdb exited."
                return 0
            fi

            BIGTIME=""
            if test "${VERBOSE}" = "1"
            then
                BIGTIME="--verbose"
            fi

            /usr/bin/time ${BIGTIME} \
                ${OUTPUT}/tests/unittest \
                    --colour-mode ansi \
                    --tmp-dir "${PROJECT_TMPDIR}" \
                    --binary-dir "${BINARY_DIR}" \
                    --dist-dir "${DIST_DIR}" \
                    --source-dir "${SOURCE}" \
                    ${PROJECT_TEST_ARGS} \
                    ${TEST_SEED} \
                    --progress \
                    ${TEST_OPTIONS} \
                        "${TESTS}" | tee ${OUTPUT}/tests/tests.log
            RESULT=${PIPESTATUS[0]}
            echo "info: test logs were saved in: \"${OUTPUT}/tests/tests.log\"."
            if [[ ${RESULT} -ne 0 ]]
            then
                echo "error: test(s) failed."
                return 1
            fi
        fi
    fi

    if ${LAUNCHPAD}
    then
        cd ${TOPDIR}
        if test ! -d ~/.build-snap.rc
        then
            echo
            echo "warning: no ~/.build-snap.rc file found, send-to-lanchpad.sh may fail"
            echo "warning: because it can't properly sign the source files."
            echo
        fi
        bin/send-to-launchpad.sh ${PROJECT}
    fi

    echo "info: build process done on `date`"
}

if ${LESS}
then
    process 2>&1 | less -SR
    RESULT=${PIPESTATUS[0]}
else
    process
    RESULT=${?}
fi

if [[ ${RESULT} -ne 0 ]]
then
    echo
    echo "Build, Tests/Coverage, or Upload failed on `date`."
    if test -n "${COVERAGE}"
    then
        echo "Test output is here: ${BINARY_DIR}/coverage/test_log.txt"
    fi
    exit ${RESULT}
fi

echo
echo "Success."

# vim: ts=4 sw=4 et
